#Code for control the stepper motors

#!/usr/bin/python
from Adafruit_MotorHAT import Adafruit_MotorHAT, Adafruit_DCMotor, Adafruit_StepperMotor
from math import pi
import time
import atexit
import threading
import random

# gear motor radius in milimeters
R = 6

# const motor steps in grades in SINGLE mode
stepDeg = 1.8

# const motor steps in centimeters in SINGLE mode
stepDist = stepDeg*pi/180*R

# number of motor steps
numSteps = 16

# define motors at home position
q1 = q2 = q3 = 0

# bottom hat is default address 0x60
bottomhat = Adafruit_MotorHAT(addr=0x60)

# top hat has A0 jumper closed, so its address 0x61
tophat = Adafruit_MotorHAT(addr=0x61)

# create empty threads (these will hold the stepper 1, 2 & 3 threads)
stepperThreads = [threading.Thread(), threading.Thread(), threading.Thread()]

# position and velocity vectors
q = [q1, q2, q3]
q_req = [q1_req, q2_req, q3_req]
q_vel_req = [q1_vel_req, q2_vel_req, q3_vel_req]

# recommended for auto-disabling motors on shutdown!
def turnOffMotors():
    tophat.getMotor(1).run(Adafruit_MotorHAT.RELEASE)
    tophat.getMotor(2).run(Adafruit_MotorHAT.RELEASE)
    tophat.getMotor(3).run(Adafruit_MotorHAT.RELEASE)
    tophat.getMotor(4).run(Adafruit_MotorHAT.RELEASE)
    bottomhat.getMotor(1).run(Adafruit_MotorHAT.RELEASE)
    bottomhat.getMotor(2).run(Adafruit_MotorHAT.RELEASE)
    bottomhat.getMotor(3).run(Adafruit_MotorHAT.RELEASE)
    bottomhat.getMotor(4).run(Adafruit_MotorHAT.RELEASE)

# create the tolerance rate
def makeTolerance(step):
    if (step == Adafruit_MotorHAT.SINGLE or step == Adafruit_MotorHAT.DOUBLE):
        tolerance = 0.9*stepDist
    elif (step == Adafruit_MotorHAT.INTERLEAVE):
        tolerance = (0.9*stepDist)/2
    elif (step == Adafruit_MotorHAT.MICROSTEP):
        tolerance = (0.9*stepDist)/16
    else:
        tolerance = 0.9*stepDist
    return tolerance

# gives the angular velocity in REV/min when qi_vel is in mm/s
def angVel(qi_vel):
    return 30/pi*qi_vel/R

atexit.register(turnOffMotors)

myStepper1 = bottomhat.getStepper(200, 1)      # 200 steps/rev, motor port #1
myStepper2 = bottomhat.getStepper(200, 2)      # 200 steps/rev, motor port #2
myStepper3 = tophat.getStepper(200, 1)         # 200 steps/rev, motor port #1

stepstyle = Adafruit_MotorHAT.MICROSTEP
steppers = [myStepper1, myStepper2, myStepper3]

def stepper_worker(stepper, numsteps, direction, style):
    #print("Steppin!")
    stepper.step(numsteps, direction, style)
    #print("Done")
    
TOLERANCE = makeTolerance(stepstyle)    # movement precision
while (True):
    for i in range(3):        
        if not stepperThreads[i].isAlive():
            print("Stepper 1")
            case1 = q_req[i] > q[i] + TOLERANCE
            case2 = q_req[i] < q[i] - TOLERANCE
            if (case1 == True):
                dir = Adafruit_MotorHAT.FORWARD
            elif (case2 == True):
                dir = Adafruit_MotorHAT.BACKWARD
            else:
                dir = Adafruit_MotorHAT.FORWARD
                
            # define angular velocity in rev/min
            if (case1 or case2):
                w = angVel(q_vel_req[i])
            else:
                w = 0                       # stop the motor

            # set velocity
            steppers[i].setSpeed(w)
            
            # create thread with numStep steps            
            if (case1 or case2):
                stepperThreads[i] = threading.Thread(target=stepper_worker, args=(steppers[i], numSteps, dir, stepstyle,))
                stepperThreads[i].start()
    
    time.sleep(0.1)  # Small delay to stop from constantly polling threads (see: https://forums.adafruit.com/viewtopic.php?f=50&t=104354&p=562733#p562733)
